if (typeof define !== 'function') { var define = require('amdefine')(module); }

define(function() {
  return {
    argsAsArray : function(fn, arr) {

	return fn(arr[0], arr[1], arr[2]);
	
    },

    speak : function(fn, obj) {
	
	return fn.call(obj);
    },

    functionFunction : function(str) {

	return (function () {return str + ', ' + arguments[0]});

    },

    makeClosures : function(arr, fn) {
	
	var arr2 = [];
	for(var i=0; i < arr.length; i++){
		create_func(i);
	}

	function create_func(id){
		arr2.push( function() { return fn(arr[id]) } );
	}

	return arr2;
	
    },

    partial : function(fn, str1, str2) {

	return (function partial(str) { return fn(str1, str2, str);} );
    },

    useArguments : function() {
	
	var total = 0;
	for (var i=0; i < arguments.length; i++) {
		total += arguments[i];
	}
	return total;	
    },

    callIt : function(fn) {

	var args = Array.prototype.slice.call(arguments, 1);
	return fn.apply(null, args);
	
    },

    partialUsingArguments : function(fn) {

	var args = Array.prototype.slice.call(arguments, 1);
	
	return function () {
		return fn.apply(this, args.concat(Array.prototype.slice.call(arguments, 0)));
	};
	
    },


    curryIt : function(fn) {
	
	var n = fn.length;
	
	function curry(prev) {
		return function(arg) {
			var args = prev.concat(arg);
			if (args.length < n) {
				return curry(args);
			} else {
				return fn.apply(this, args);
			}
		}
	}

	return curry([]);

	/*function curry(fn) {
		len = fn.length;

		function sub_curry(fn) {
			var stored_args = Array.prototype.slice.call(arguments, 1);
			if (arguments.length < len) {
				var new_args = Array.prototype.slice.call(arguments, 0),  args= stored_args.concat(new_args); 
				return sub_curry(args);
			} else {
				return fn.apply(this, args);
			}
		}
	}
	return curry([]);
	function sub_curry(fn) {
    		var stored_args = Array.prototype.slice.call(arguments, 1);
    		return function () {
			var new_args = Array.prototype.slice.call(arguments, 0),  args= stored_args.concat(new_args);
        		return fn.apply(null, args);
    		};
	}

	len = fn.length;
    	var stored_args = Array.prototype.slice.call(arguments, 1);
        if (arguments.length < len) {
		var new_args = Array.prototype.slice.call(arguments, 0);
		var args= stored_args.concat(new_args);        	
		return sub_curry.apply(fn, args);
        } else {
         	return fn.apply(null, arguments);
        }*/
    	
    }
  };
});
